package com.fivvy.disclaimerapi.model;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

import java.util.Comparator;
import java.util.Objects;

@DynamoDBTable(tableName = "disclaimer")
public class Disclaimer {
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    private String disclaimerId;

    @DynamoDBAttribute
    private String name;

    @DynamoDBAttribute
    private String text;

    @DynamoDBAttribute
    private String version;

    @DynamoDBAttribute(attributeName = "create_at")
    private String createAt;

    @DynamoDBAttribute(attributeName = "update_at")
    private String updateAt;

    public String getDisclaimerId() {
        return disclaimerId;
    }

    public void setDisclaimerId(String disclaimerId) {
        this.disclaimerId = disclaimerId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public String getCreateAt() {
        return createAt;
    }

    public void setCreateAt(String createAt) {
        this.createAt = createAt;
    }

    public String getUpdateAt() {
        return updateAt;
    }

    public void setUpdateAt(String updateAt) {
        this.updateAt = updateAt;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Disclaimer)) {
            return false;
        }

        return 0 == Comparator.comparing(Disclaimer::getDisclaimerId)
                        .thenComparing(Disclaimer::getName)
                        .thenComparing(Disclaimer::getText)
                        .thenComparing(Disclaimer::getVersion)
                        .thenComparing(Disclaimer::getCreateAt)
                        .thenComparing(Disclaimer::getUpdateAt)
                        .compare(this, (Disclaimer) obj);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                getDisclaimerId(),
                getName(),
                getText(),
                getVersion(),
                getCreateAt(),
                getUpdateAt());
    }

    @Override
    public String toString() {
        return "Disclaimer{" +
                "disclaimerId='" + disclaimerId + '\'' +
                ", name='" + name + '\'' +
                ", text='" + text + '\'' +
                ", version='" + version + '\'' +
                ", createAt='" + createAt + '\'' +
                ", updateAt='" + updateAt + '\'' +
                '}';
    }

    public boolean isEqualExcludingDates(Disclaimer other) {
        return 0 == Comparator.comparing(Disclaimer::getName)
                .thenComparing(Disclaimer::getText)
                .thenComparing(Disclaimer::getVersion)
                .compare(this, other);
    }
}
